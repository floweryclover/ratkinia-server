// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Stc.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_Stc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Stc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Stc_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Stc_2eproto {
  static const ::uint32_t offsets[];
};
namespace RatkiniaProtocol {
class CreateCharacterResponse;
struct CreateCharacterResponseDefaultTypeInternal;
extern CreateCharacterResponseDefaultTypeInternal _CreateCharacterResponse_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class RegisterResponse;
struct RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
}  // namespace RatkiniaProtocol
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace RatkiniaProtocol {
enum LoginResponse_LoginResult : int {
  LoginResponse_LoginResult_Success = 0,
  LoginResponse_LoginResult_Failure = 1,
  LoginResponse_LoginResult_DuplicateContext = 2,
  LoginResponse_LoginResult_DuplicateAccount = 3,
  LoginResponse_LoginResult_LoginResponse_LoginResult_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LoginResponse_LoginResult_LoginResponse_LoginResult_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LoginResponse_LoginResult_IsValid(int value);
extern const uint32_t LoginResponse_LoginResult_internal_data_[];
constexpr LoginResponse_LoginResult LoginResponse_LoginResult_LoginResult_MIN = static_cast<LoginResponse_LoginResult>(0);
constexpr LoginResponse_LoginResult LoginResponse_LoginResult_LoginResult_MAX = static_cast<LoginResponse_LoginResult>(3);
constexpr int LoginResponse_LoginResult_LoginResult_ARRAYSIZE = 3 + 1;
const std::string& LoginResponse_LoginResult_Name(LoginResponse_LoginResult value);
template <typename T>
const std::string& LoginResponse_LoginResult_Name(T value) {
  static_assert(std::is_same<T, LoginResponse_LoginResult>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LoginResult_Name().");
  return LoginResponse_LoginResult_Name(static_cast<LoginResponse_LoginResult>(value));
}
bool LoginResponse_LoginResult_Parse(absl::string_view name, LoginResponse_LoginResult* value);
enum CreateCharacterResponse_CreateCharacterResult : int {
  CreateCharacterResponse_CreateCharacterResult_Success = 0,
  CreateCharacterResponse_CreateCharacterResult_InvalidNameLength = 1,
  CreateCharacterResponse_CreateCharacterResult_DuplicateName = 2,
  CreateCharacterResponse_CreateCharacterResult_UnknownError = 3,
  CreateCharacterResponse_CreateCharacterResult_CreateCharacterResponse_CreateCharacterResult_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CreateCharacterResponse_CreateCharacterResult_CreateCharacterResponse_CreateCharacterResult_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CreateCharacterResponse_CreateCharacterResult_IsValid(int value);
extern const uint32_t CreateCharacterResponse_CreateCharacterResult_internal_data_[];
constexpr CreateCharacterResponse_CreateCharacterResult CreateCharacterResponse_CreateCharacterResult_CreateCharacterResult_MIN = static_cast<CreateCharacterResponse_CreateCharacterResult>(0);
constexpr CreateCharacterResponse_CreateCharacterResult CreateCharacterResponse_CreateCharacterResult_CreateCharacterResult_MAX = static_cast<CreateCharacterResponse_CreateCharacterResult>(3);
constexpr int CreateCharacterResponse_CreateCharacterResult_CreateCharacterResult_ARRAYSIZE = 3 + 1;
const std::string& CreateCharacterResponse_CreateCharacterResult_Name(CreateCharacterResponse_CreateCharacterResult value);
template <typename T>
const std::string& CreateCharacterResponse_CreateCharacterResult_Name(T value) {
  static_assert(std::is_same<T, CreateCharacterResponse_CreateCharacterResult>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CreateCharacterResult_Name().");
  return CreateCharacterResponse_CreateCharacterResult_Name(static_cast<CreateCharacterResponse_CreateCharacterResult>(value));
}
bool CreateCharacterResponse_CreateCharacterResult_Parse(absl::string_view name, CreateCharacterResponse_CreateCharacterResult* value);

// ===================================================================


// -------------------------------------------------------------------

class RegisterResponse final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:RatkiniaProtocol.RegisterResponse) */ {
 public:
  inline RegisterResponse() : RegisterResponse(nullptr) {}
  ~RegisterResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RegisterResponse(const RegisterResponse& from) : RegisterResponse(nullptr, from) {}
  inline RegisterResponse(RegisterResponse&& from) noexcept
      : RegisterResponse(nullptr, std::move(from)) {}
  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
        &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RegisterResponse& a, RegisterResponse& b) { a.Swap(&b); }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::MessageLite::DefaultConstruct<RegisterResponse>(arena);
  }
  void CheckTypeAndMergeFrom(
      const ::google::protobuf::MessageLite& from) final;
  void CopyFrom(const RegisterResponse& from);
  void MergeFrom(const RegisterResponse& from);
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegisterResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RatkiniaProtocol.RegisterResponse"; }

 protected:
  explicit RegisterResponse(::google::protobuf::Arena* arena);
  RegisterResponse(::google::protobuf::Arena* arena, const RegisterResponse& from);
  RegisterResponse(::google::protobuf::Arena* arena, RegisterResponse&& from) noexcept
      : RegisterResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData() const final;

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFailedReasonFieldNumber = 2,
    kSuccessfulFieldNumber = 1,
  };
  // string failed_reason = 2;
  void clear_failed_reason() ;
  const std::string& failed_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_failed_reason(Arg_&& arg, Args_... args);
  std::string* mutable_failed_reason();
  PROTOBUF_NODISCARD std::string* release_failed_reason();
  void set_allocated_failed_reason(std::string* value);

  private:
  const std::string& _internal_failed_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_failed_reason(
      const std::string& value);
  std::string* _internal_mutable_failed_reason();

  public:
  // bool successful = 1;
  void clear_successful() ;
  bool successful() const;
  void set_successful(bool value);

  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RatkiniaProtocol.RegisterResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RegisterResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RegisterResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr failed_reason_;
    bool successful_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Stc_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:RatkiniaProtocol.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  ~LoginResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LoginResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline LoginResponse(const LoginResponse& from) : LoginResponse(nullptr, from) {}
  inline LoginResponse(LoginResponse&& from) noexcept
      : LoginResponse(nullptr, std::move(from)) {}
  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
        &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LoginResponse& a, LoginResponse& b) { a.Swap(&b); }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::MessageLite::DefaultConstruct<LoginResponse>(arena);
  }
  void CheckTypeAndMergeFrom(
      const ::google::protobuf::MessageLite& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LoginResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RatkiniaProtocol.LoginResponse"; }

 protected:
  explicit LoginResponse(::google::protobuf::Arena* arena);
  LoginResponse(::google::protobuf::Arena* arena, const LoginResponse& from);
  LoginResponse(::google::protobuf::Arena* arena, LoginResponse&& from) noexcept
      : LoginResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData() const final;

 public:
  // nested types ----------------------------------------------------
  using LoginResult = LoginResponse_LoginResult;
  static constexpr LoginResult Success = LoginResponse_LoginResult_Success;
  static constexpr LoginResult Failure = LoginResponse_LoginResult_Failure;
  static constexpr LoginResult DuplicateContext = LoginResponse_LoginResult_DuplicateContext;
  static constexpr LoginResult DuplicateAccount = LoginResponse_LoginResult_DuplicateAccount;
  static inline bool LoginResult_IsValid(int value) {
    return LoginResponse_LoginResult_IsValid(value);
  }
  static constexpr LoginResult LoginResult_MIN = LoginResponse_LoginResult_LoginResult_MIN;
  static constexpr LoginResult LoginResult_MAX = LoginResponse_LoginResult_LoginResult_MAX;
  static constexpr int LoginResult_ARRAYSIZE = LoginResponse_LoginResult_LoginResult_ARRAYSIZE;
  template <typename T>
  static inline const std::string& LoginResult_Name(T value) {
    return LoginResponse_LoginResult_Name(value);
  }
  static inline bool LoginResult_Parse(absl::string_view name, LoginResult* value) {
    return LoginResponse_LoginResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 1,
  };
  // .RatkiniaProtocol.LoginResponse.LoginResult result = 1;
  void clear_result() ;
  ::RatkiniaProtocol::LoginResponse_LoginResult result() const;
  void set_result(::RatkiniaProtocol::LoginResponse_LoginResult value);

  private:
  ::RatkiniaProtocol::LoginResponse_LoginResult _internal_result() const;
  void _internal_set_result(::RatkiniaProtocol::LoginResponse_LoginResult value);

  public:
  // @@protoc_insertion_point(class_scope:RatkiniaProtocol.LoginResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_LoginResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LoginResponse& from_msg);
    int result_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Stc_2eproto;
};
// -------------------------------------------------------------------

class CreateCharacterResponse final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:RatkiniaProtocol.CreateCharacterResponse) */ {
 public:
  inline CreateCharacterResponse() : CreateCharacterResponse(nullptr) {}
  ~CreateCharacterResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateCharacterResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateCharacterResponse(const CreateCharacterResponse& from) : CreateCharacterResponse(nullptr, from) {}
  inline CreateCharacterResponse(CreateCharacterResponse&& from) noexcept
      : CreateCharacterResponse(nullptr, std::move(from)) {}
  inline CreateCharacterResponse& operator=(const CreateCharacterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterResponse& operator=(CreateCharacterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CreateCharacterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCharacterResponse* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterResponse*>(
        &_CreateCharacterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CreateCharacterResponse& a, CreateCharacterResponse& b) { a.Swap(&b); }
  inline void Swap(CreateCharacterResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCharacterResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCharacterResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::MessageLite::DefaultConstruct<CreateCharacterResponse>(arena);
  }
  void CheckTypeAndMergeFrom(
      const ::google::protobuf::MessageLite& from) final;
  void CopyFrom(const CreateCharacterResponse& from);
  void MergeFrom(const CreateCharacterResponse& from);
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateCharacterResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RatkiniaProtocol.CreateCharacterResponse"; }

 protected:
  explicit CreateCharacterResponse(::google::protobuf::Arena* arena);
  CreateCharacterResponse(::google::protobuf::Arena* arena, const CreateCharacterResponse& from);
  CreateCharacterResponse(::google::protobuf::Arena* arena, CreateCharacterResponse&& from) noexcept
      : CreateCharacterResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData() const final;

 public:
  // nested types ----------------------------------------------------
  using CreateCharacterResult = CreateCharacterResponse_CreateCharacterResult;
  static constexpr CreateCharacterResult Success = CreateCharacterResponse_CreateCharacterResult_Success;
  static constexpr CreateCharacterResult InvalidNameLength = CreateCharacterResponse_CreateCharacterResult_InvalidNameLength;
  static constexpr CreateCharacterResult DuplicateName = CreateCharacterResponse_CreateCharacterResult_DuplicateName;
  static constexpr CreateCharacterResult UnknownError = CreateCharacterResponse_CreateCharacterResult_UnknownError;
  static inline bool CreateCharacterResult_IsValid(int value) {
    return CreateCharacterResponse_CreateCharacterResult_IsValid(value);
  }
  static constexpr CreateCharacterResult CreateCharacterResult_MIN = CreateCharacterResponse_CreateCharacterResult_CreateCharacterResult_MIN;
  static constexpr CreateCharacterResult CreateCharacterResult_MAX = CreateCharacterResponse_CreateCharacterResult_CreateCharacterResult_MAX;
  static constexpr int CreateCharacterResult_ARRAYSIZE = CreateCharacterResponse_CreateCharacterResult_CreateCharacterResult_ARRAYSIZE;
  template <typename T>
  static inline const std::string& CreateCharacterResult_Name(T value) {
    return CreateCharacterResponse_CreateCharacterResult_Name(value);
  }
  static inline bool CreateCharacterResult_Parse(absl::string_view name, CreateCharacterResult* value) {
    return CreateCharacterResponse_CreateCharacterResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessfulFieldNumber = 1,
  };
  // .RatkiniaProtocol.CreateCharacterResponse.CreateCharacterResult successful = 1;
  void clear_successful() ;
  ::RatkiniaProtocol::CreateCharacterResponse_CreateCharacterResult successful() const;
  void set_successful(::RatkiniaProtocol::CreateCharacterResponse_CreateCharacterResult value);

  private:
  ::RatkiniaProtocol::CreateCharacterResponse_CreateCharacterResult _internal_successful() const;
  void _internal_set_successful(::RatkiniaProtocol::CreateCharacterResponse_CreateCharacterResult value);

  public:
  // @@protoc_insertion_point(class_scope:RatkiniaProtocol.CreateCharacterResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CreateCharacterResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateCharacterResponse& from_msg);
    int successful_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Stc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LoginResponse

// .RatkiniaProtocol.LoginResponse.LoginResult result = 1;
inline void LoginResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::RatkiniaProtocol::LoginResponse_LoginResult LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:RatkiniaProtocol.LoginResponse.result)
  return _internal_result();
}
inline void LoginResponse::set_result(::RatkiniaProtocol::LoginResponse_LoginResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:RatkiniaProtocol.LoginResponse.result)
}
inline ::RatkiniaProtocol::LoginResponse_LoginResult LoginResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::RatkiniaProtocol::LoginResponse_LoginResult>(_impl_.result_);
}
inline void LoginResponse::_internal_set_result(::RatkiniaProtocol::LoginResponse_LoginResult value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// -------------------------------------------------------------------

// RegisterResponse

// bool successful = 1;
inline void RegisterResponse::clear_successful() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.successful_ = false;
}
inline bool RegisterResponse::successful() const {
  // @@protoc_insertion_point(field_get:RatkiniaProtocol.RegisterResponse.successful)
  return _internal_successful();
}
inline void RegisterResponse::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:RatkiniaProtocol.RegisterResponse.successful)
}
inline bool RegisterResponse::_internal_successful() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.successful_;
}
inline void RegisterResponse::_internal_set_successful(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.successful_ = value;
}

// string failed_reason = 2;
inline void RegisterResponse::clear_failed_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failed_reason_.ClearToEmpty();
}
inline const std::string& RegisterResponse::failed_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatkiniaProtocol.RegisterResponse.failed_reason)
  return _internal_failed_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterResponse::set_failed_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failed_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RatkiniaProtocol.RegisterResponse.failed_reason)
}
inline std::string* RegisterResponse::mutable_failed_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_failed_reason();
  // @@protoc_insertion_point(field_mutable:RatkiniaProtocol.RegisterResponse.failed_reason)
  return _s;
}
inline const std::string& RegisterResponse::_internal_failed_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.failed_reason_.Get();
}
inline void RegisterResponse::_internal_set_failed_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failed_reason_.Set(value, GetArena());
}
inline std::string* RegisterResponse::_internal_mutable_failed_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.failed_reason_.Mutable( GetArena());
}
inline std::string* RegisterResponse::release_failed_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RatkiniaProtocol.RegisterResponse.failed_reason)
  return _impl_.failed_reason_.Release();
}
inline void RegisterResponse::set_allocated_failed_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failed_reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.failed_reason_.IsDefault()) {
          _impl_.failed_reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RatkiniaProtocol.RegisterResponse.failed_reason)
}

// -------------------------------------------------------------------

// CreateCharacterResponse

// .RatkiniaProtocol.CreateCharacterResponse.CreateCharacterResult successful = 1;
inline void CreateCharacterResponse::clear_successful() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.successful_ = 0;
}
inline ::RatkiniaProtocol::CreateCharacterResponse_CreateCharacterResult CreateCharacterResponse::successful() const {
  // @@protoc_insertion_point(field_get:RatkiniaProtocol.CreateCharacterResponse.successful)
  return _internal_successful();
}
inline void CreateCharacterResponse::set_successful(::RatkiniaProtocol::CreateCharacterResponse_CreateCharacterResult value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:RatkiniaProtocol.CreateCharacterResponse.successful)
}
inline ::RatkiniaProtocol::CreateCharacterResponse_CreateCharacterResult CreateCharacterResponse::_internal_successful() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::RatkiniaProtocol::CreateCharacterResponse_CreateCharacterResult>(_impl_.successful_);
}
inline void CreateCharacterResponse::_internal_set_successful(::RatkiniaProtocol::CreateCharacterResponse_CreateCharacterResult value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.successful_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace RatkiniaProtocol


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::RatkiniaProtocol::LoginResponse_LoginResult> : std::true_type {};
template <>
struct is_proto_enum<::RatkiniaProtocol::CreateCharacterResponse_CreateCharacterResult> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Stc_2eproto_2epb_2eh
